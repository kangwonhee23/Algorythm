{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55ac6713",
   "metadata": {},
   "outputs": [],
   "source": [
    "#for 문으로 작성한 선형 검색 알고리즘\n",
    "\n",
    "from typing import Any, Sequence\n",
    "\n",
    "def seq_search(a: Sequence, key: Any) -> int:\n",
    "    \"\"\"시퀀스 a에서 key와 값이 같은 원소를 선형 검색(for문)\"\"\"\n",
    "    for i in range(len(a)):\n",
    "        if a[i] == key:\n",
    "            return i       \n",
    "    return -1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d4c96a59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 1\n",
      "추가할 키를 입력하세요.: 1\n",
      "추가할 값을 입력하세요.: 수연\n",
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 1\n",
      "추가할 키를 입력하세요.: 5\n",
      "추가할 값을 입력하세요.: 동혁\n",
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 1\n",
      "추가할 키를 입력하세요.: 10\n",
      "추가할 값을 입력하세요.: 예지\n",
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 1\n",
      "추가할 키를 입력하세요.: 12\n",
      "추가할 값을 입력하세요.: 원준\n",
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 1\n",
      "추가할 키를 입력하세요.: 14\n",
      "추가할 값을 입력하세요.: 민서\n",
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 3\n",
      "검색할 키를 입력하세요,: 5\n",
      "검색한 키를 갖는 값은 동혁입니다.\n",
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 4\n",
      "0\n",
      "1→14 (민서)→1 (수연)\n",
      "2\n",
      "3\n",
      "4\n",
      "5→5 (동혁)\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10→10 (예지)\n",
      "11\n",
      "12→12 (원준)\n",
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 2\n",
      "삭제할 키를 입력하세요.: 14\n",
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 4\n",
      "0\n",
      "1→1 (수연)\n",
      "2\n",
      "3\n",
      "4\n",
      "5→5 (동혁)\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10→10 (예지)\n",
      "11\n",
      "12→12 (원준)\n",
      "(1)추가  (2)삭제  (3)검색  (4)덤프  (5)종료: 5\n"
     ]
    }
   ],
   "source": [
    "from __future__ import annotations\n",
    "from typing import Any, Type\n",
    "import hashlib\n",
    "\n",
    "class Node:\n",
    "    \"\"\"해시를 구성하는 노드\"\"\"\n",
    "\n",
    "    def __init__ (self, key: Any, value: Any, next: Node) -> None:\n",
    "        \"\"\"초기화\"\"\"\n",
    "        self.key = key # 키\n",
    "        self.value = value # 값\n",
    "        self.next = next # 뒤쪽 노드를 참조\n",
    "        \n",
    "class ChainedHash:\n",
    "    \"\"\"체인법으로 해시 클래스 구현\"\"\"\n",
    "    \n",
    "    def __init__(self, capacity: int) -> None:\n",
    "        \"\"\"초기화\"\"\"\n",
    "        self.capacity = capacity #해시 테이블의 크기를 지정\n",
    "        self.table = [None] * self.capacity #해시 테이블(리스트)을 선언\n",
    "        \n",
    "    def hash_value(self, key: Any ) -> int:\n",
    "        \"\"\"해시값을 구함\"\"\"\n",
    "        if isinstance(key, int):\n",
    "            return key % self.capacity\n",
    "        return int(hashlib.sha256(str(key).encode()).hexdigest(), 16) % self.capacity\n",
    "    \n",
    "    def search(self, key: Any) -> Any:\n",
    "        \"\"\"키가 key인 원소를 검색하여 값을 반환\"\"\"\n",
    "        hash = self.hash_value(key) #검색하는 키의 해시값\n",
    "        p = self.table[hash] #노드를 주목\n",
    "        \n",
    "        while p is not None:\n",
    "            if p.key == key:\n",
    "                return p.value # 검색 성공\n",
    "            p = p.next # 뒤쪽 노드를 주목\n",
    "            \n",
    "        return None #검색 실패\n",
    "    \n",
    "    def add(self, key: Any, value: Any) -> bool:\n",
    "        \"\"\"키가 key이고 값이 value인 원소를 추가\"\"\"\n",
    "        hash = self.hash_value(key) # 추가하는 key의 해시값\n",
    "        p = self.table[hash] # 노드를 주목\n",
    "        \n",
    "        while p is not None:\n",
    "            if p.key == key:\n",
    "                return False #추가 실패\n",
    "            p = p.next # 뒤쪽 노드를 주목\n",
    "        \n",
    "        temp = Node(key, value, self.table[hash])\n",
    "        self.table[hash] = temp # 노드를 추가\n",
    "        return True # 추가 성공\n",
    "    \n",
    "    def remove(self, key: Any) -> bool:\n",
    "        \"\"\"키가 key인 원소를 삭제\"\"\"\n",
    "        hash = self.hash_value(key) #삭제할 key의 해시값\n",
    "        p = self.table[hash] #노드를 주목\n",
    "        pp = None # 바로 앞의 노드를 주목\n",
    "        \n",
    "        while p is not None:\n",
    "            if p.key == key: # key를 발견하면 아래를 실행\n",
    "                if pp is None:\n",
    "                    self.table[hash] = p.next\n",
    "                else:\n",
    "                    pp.next = p.next\n",
    "                return True # key 삭제 성공\n",
    "            pp = p\n",
    "            p = p.next\n",
    "        return False\n",
    "    \n",
    "    def dump(self) -> None:\n",
    "        \"\"\"해시 테이블을 덤프\"\"\"\n",
    "\n",
    "        for i in range(self.capacity):\n",
    "            p = self.table[i]\n",
    "            print(i, end='')\n",
    "            while p is not None:\n",
    "                print(f'→{p.key} ({p.value})', end='')\n",
    "                p = p.next\n",
    "            print()\n",
    "\n",
    "from enum import Enum\n",
    "\n",
    "Menu = Enum('Menu', ['추가', '삭제', '검색', '덤프', '종료']) #메뉴를 선언\n",
    "\n",
    "def select_menu() -> Menu :\n",
    "    \"\"\"메뉴 선택\"\"\"\n",
    "    s = [f'({m.value}){m.name}' for m in Menu]\n",
    "    while True:\n",
    "        print(*s, sep='  ', end='')\n",
    "        n = int(input(': '))\n",
    "        if 1 <= n <= len(Menu):\n",
    "            return Menu(n)\n",
    "        \n",
    "hash = ChainedHash(13) # 크기가 13인 해시 테이블을 생성\n",
    "\n",
    "while True:\n",
    "    menu = select_menu() # 메뉴 선택\n",
    "    \n",
    "    if menu == Menu.추가: #추가\n",
    "        key = int(input('추가할 키를 입력하세요.: '))\n",
    "        val = input('추가할 값을 입력하세요.: ')\n",
    "        if not hash.add(key, val):\n",
    "            print('추가를 실패했습니다!')\n",
    "            \n",
    "    elif menu == Menu.삭제: #삭제\n",
    "        key = int(input('삭제할 키를 입력하세요.: '))\n",
    "        if not hash.remove(key):\n",
    "            print('삭제를 실패했습니다!')\n",
    "            \n",
    "    elif menu == Menu.검색: #검색\n",
    "        key = int(input('검색할 키를 입력하세요,: '))\n",
    "        t = hash.search(key)\n",
    "        if t is not None:\n",
    "            print(f'검색한 키를 갖는 값은 {t}입니다.')\n",
    "        else:\n",
    "            print('검색할 데이터가 없습니다.')\n",
    "            \n",
    "    elif menu == Menu.덤프: #덤프\n",
    "        hash.dump() \n",
    "        \n",
    "    else:\n",
    "        break #종료\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46ed27cc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d617d7d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
